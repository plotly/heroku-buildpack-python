#!/usr/bin/env bash

set +e
runtime-fixer runtime.txt
PYTHON_VERSION=$(cat runtime.txt)

# The location of the pre-compiled python binary.
VENDORED_PYTHON="${VENDOR_URL}/${STACK}/runtimes/${PYTHON_VERSION}.tar.gz"

SECURITY_UPDATE="Python has released a security update! Please consider upgrading to"
RUNTIME_LINK="https://dash.plot.ly/dash-deployment-server/application-structure"
SUPPORT_LINK="https://dash.plot.ly/dash-deployment-server/troubleshooting"

ONLY_SUPPORTED_2_VERSION="Only the latest version of Python 2 is supported on the platform. Please consider upgrading to"

PYTHON_2_EOL_UPDATE="Python 2 has reached it's community EOL. Upgrade your Python runtime to maintain a secure application as soon as possible."

TMP_CURL_OUTPUT=$(mktemp)

check_runtime () {
  if ! curl --output /dev/null --verbose --head --fail "$VENDORED_PYTHON" 2>"$TMP_CURL_OUTPUT" \
      && [[ "$PLOTLY_IS_AIRGAPPED" == "0" ]]; then
    puts-warn "Falling back to heroku vendor."
    VENDORED_PYTHON="${FALLBACK_VENDOR_URL}/runtimes/$PYTHON_VERSION.tar.gz"
    curl --output /dev/null --verbose --head --fail "$VENDORED_PYTHON" 2>"$TMP_CURL_OUTPUT"
  fi
  return $?
}

TMP_CURL_OUTPUT=$(mktemp)

# check if runtime exists
if check_runtime; then
  if [[ "$PYTHON_VERSION" == $PY39* ]]; then
    if [ "$PYTHON_VERSION" != "$LATEST_39" ]; then
      puts-warn "$SECURITY_UPDATE" "$LATEST_39"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PY38* ]]; then
    # do things to alert the user of security release available
    if [ "$PYTHON_VERSION" != "$LATEST_38" ]; then
      puts-warn "$SECURITY_UPDATE" "$LATEST_38"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PY37* ]]; then
    # security update note
    if [ "$PYTHON_VERSION" != "$LATEST_37" ]; then
      puts-warn "$SECURITY_UPDATE" "$LATEST_37"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PY36* ]]; then
    # security update note
    if [ "$PYTHON_VERSION" != "$LATEST_36" ]; then
      puts-warn "$SECURITY_UPDATE" "$LATEST_36"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PY35* ]]; then
    # security update note
    if [ "$PYTHON_VERSION" != "$LATEST_35" ]; then
      puts-warn "$SECURITY_UPDATE" "$LATEST_35"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PY34* ]]; then
    # security update note
    if [ "$PYTHON_VERSION" != "$LATEST_34" ]; then
      puts-warn "$SECURITY_UPDATE" "$LATEST_34"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PY27* ]]; then
    puts-warn "$PYTHON_2_EOL_UPDATE"
    echo "       Learn More: https://devcenter.heroku.com/articles/python-2-7-eol-faq"
    # security update note
    if [ "$PYTHON_VERSION" != "$LATEST_27" ]; then
      puts-warn "$ONLY_SUPPORTED_2_VERSION" "$LATEST_27"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PYPY27* ]]; then
    # security update note
    if [ "$PYTHON_VERSION" != "$PYPY_27" ]; then
      puts-warn "Could not find that Pypy version. Did you mean" "${PYPY_27}?"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
  if [[ "$PYTHON_VERSION" == $PYPY36* ]]; then
    # security update note
    if [ "$PYTHON_VERSION" != "$PYPY_36" ]; then
      puts-warn "Could not find that Pypy version. Did you mean" "${PYPY_36}?"
      echo "       Learn More: $RUNTIME_LINK"
    fi
  fi
else
  cat "$TMP_CURL_OUTPUT"
  puts-warn "Requested runtime ($PYTHON_VERSION) is not available for this stack ($STACK)."
  puts-warn "Aborting.  More info: $SUPPORT_LINK"
  exit 1
fi

mcount "version.python.${PYTHON_VERSION}"

if [[ "$STACK" != "$CACHED_PYTHON_STACK" ]]; then
    puts-step "Stack has changed from $CACHED_PYTHON_STACK to $STACK, clearing cache"
    rm -rf .heroku/python-stack .heroku/python-version .heroku/python .heroku/vendor .heroku/python .heroku/python-sqlite3-version
fi

if [ -f .heroku/python-version ]; then
  if [ ! "$(cat .heroku/python-version)" = "$PYTHON_VERSION" ]; then
      puts-step "Found $(cat .heroku/python-version), removing"
      rm -rf .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi

# Check if we should reinstall python dependencies
if [[ ! -f "$CACHE_DIR/.heroku/requirements.txt" ]]; then
  # IF there's no cached dependencies, update cached version of requirements.txt
  # This should only run for new apps and first deploys after this update
  cp -R "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt"
else
  # IF there IS a cached directory, check for differences with the new one
  if ! diff "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt" &> /dev/null; then
    puts-step "Requirements file has been changed, clearing cached dependencies"
    # if there are any differences, clear the Python cache
    # Installing Python over again does not take noticably more time
    cp -R "$BUILD_DIR/requirements.txt" "$CACHE_DIR/.heroku/requirements.txt"
    rm -rf .heroku/python
    unset SKIP_INSTALL
  else
    puts-step "No change in requirements detected, installing from cache"
  fi
fi

if [ ! "$SKIP_INSTALL" ]; then
    puts-step "Installing $PYTHON_VERSION"

    # Prepare destination directory.
    mkdir -p .heroku/python

    mcount "version.python.$PYTHON_VERSION"

    if ! curl "${VENDORED_PYTHON}" --verbose 2>>"$TMP_CURL_OUTPUT" | tar zxv -C .heroku/python &> /dev/null; then
      cat "$TMP_CURL_OUTPUT"
      puts-warn "Requested runtime ($PYTHON_VERSION) is not available for this stack ($STACK)."
      puts-warn "Aborting.  More info: $SUPPORT_LINK"
      exit 1
    fi

  # Record for future reference.
  echo "$PYTHON_VERSION" > .heroku/python-version
  echo "$STACK" > .heroku/python-stack

  hash -r
fi

rm -f "$TMP_CURL_OUTPUT"

if [[ -f "$BUILD_DIR/Pipfile" ]]; then
  # The buildpack is pinned to old pipenv, which requires older pip.
  # Pip 9.0.2 doesn't support installing itself from a wheel, so we have to use split
  # versions here (ie: installer pip version different from target pip version).
  PIP_VERSION='9.0.2'
  PIP_TO_INSTALL="pip==${PIP_VERSION}"
else
  PIP_TO_INSTALL="${PIP_WHEEL}"
fi

puts-step "Installing pip ${PIP_VERSION}, setuptools ${SETUPTOOLS_VERSION} and wheel ${WHEEL_VERSION}"

  # This will allow users to override where pip gets installed from
  # which is useful if CI for heroku applications is run in non-heroku environments
  # where access to pypi is strictly controlled
  if [[ -n "$GET_PIP_PYPI_INDEX_URL" ]]; then
    /app/.heroku/python/bin/python "${PIP_WHEEL}/pip" install --no-index "$GET_PIP_PYPI_INDEX_URL/pip/pip-9.0.2-py2.py3-none-any.whl" "$GET_PIP_PYPI_INDEX_URL/setuptools/setuptools-39.>
    /app/.heroku/python/bin/pip install --no-index "$GET_PIP_PYPI_INDEX_URL/setuptools/setuptools-39.0.1-py2.py3-none-any.whl" &> /dev/null
  else
    /app/.heroku/python/bin/python "${PIP_WHEEL}/pip" install pip=="$PIP_UPDATE" &> /dev/null
    /app/.heroku/python/bin/pip install "$ROOT_DIR/vendor/setuptools-39.0.1-py2.py3-none-any.whl" &> /dev/null
  fi

fi

hash -r
